// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/settings"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/user"
)

// SettingsCreate is the builder for creating a Settings entity.
type SettingsCreate struct {
	config
	mutation *SettingsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *SettingsCreate) SetCreatedAt(v time.Time) *SettingsCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableCreatedAt(v *time.Time) *SettingsCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *SettingsCreate) SetUpdatedAt(v time.Time) *SettingsCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableUpdatedAt(v *time.Time) *SettingsCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetGlobalBanner sets the "global_banner" field.
func (_c *SettingsCreate) SetGlobalBanner(v string) *SettingsCreate {
	_c.mutation.SetGlobalBanner(v)
	return _c
}

// SetNillableGlobalBanner sets the "global_banner" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableGlobalBanner(v *string) *SettingsCreate {
	if v != nil {
		_c.SetGlobalBanner(*v)
	}
	return _c
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (_c *SettingsCreate) AddAdminIDs(ids ...uuid.UUID) *SettingsCreate {
	_c.mutation.AddAdminIDs(ids...)
	return _c
}

// AddAdmins adds the "admins" edges to the User entity.
func (_c *SettingsCreate) AddAdmins(v ...*User) *SettingsCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAdminIDs(ids...)
}

// Mutation returns the SettingsMutation object of the builder.
func (_c *SettingsCreate) Mutation() *SettingsMutation {
	return _c.mutation
}

// Save creates the Settings in the database.
func (_c *SettingsCreate) Save(ctx context.Context) (*Settings, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SettingsCreate) SaveX(ctx context.Context) *Settings {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SettingsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SettingsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SettingsCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := settings.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := settings.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SettingsCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Settings.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Settings.updated_at"`)}
	}
	if v, ok := _c.mutation.GlobalBanner(); ok {
		if err := settings.GlobalBannerValidator(v); err != nil {
			return &ValidationError{Name: "global_banner", err: fmt.Errorf(`ent: validator failed for field "Settings.global_banner": %w`, err)}
		}
	}
	return nil
}

func (_c *SettingsCreate) sqlSave(ctx context.Context) (*Settings, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SettingsCreate) createSpec() (*Settings, *sqlgraph.CreateSpec) {
	var (
		_node = &Settings{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(settings.Table, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(settings.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(settings.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.GlobalBanner(); ok {
		_spec.SetField(settings.FieldGlobalBanner, field.TypeString, value)
		_node.GlobalBanner = &value
	}
	if nodes := _c.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settings.AdminsTable,
			Columns: []string{settings.AdminsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Settings.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SettingsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *SettingsCreate) OnConflict(opts ...sql.ConflictOption) *SettingsUpsertOne {
	_c.conflict = opts
	return &SettingsUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Settings.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SettingsCreate) OnConflictColumns(columns ...string) *SettingsUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SettingsUpsertOne{
		create: _c,
	}
}

type (
	// SettingsUpsertOne is the builder for "upsert"-ing
	//  one Settings node.
	SettingsUpsertOne struct {
		create *SettingsCreate
	}

	// SettingsUpsert is the "OnConflict" setter.
	SettingsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SettingsUpsert) SetUpdatedAt(v time.Time) *SettingsUpsert {
	u.Set(settings.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateUpdatedAt() *SettingsUpsert {
	u.SetExcluded(settings.FieldUpdatedAt)
	return u
}

// SetGlobalBanner sets the "global_banner" field.
func (u *SettingsUpsert) SetGlobalBanner(v string) *SettingsUpsert {
	u.Set(settings.FieldGlobalBanner, v)
	return u
}

// UpdateGlobalBanner sets the "global_banner" field to the value that was provided on create.
func (u *SettingsUpsert) UpdateGlobalBanner() *SettingsUpsert {
	u.SetExcluded(settings.FieldGlobalBanner)
	return u
}

// ClearGlobalBanner clears the value of the "global_banner" field.
func (u *SettingsUpsert) ClearGlobalBanner() *SettingsUpsert {
	u.SetNull(settings.FieldGlobalBanner)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Settings.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SettingsUpsertOne) UpdateNewValues() *SettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(settings.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Settings.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SettingsUpsertOne) Ignore() *SettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SettingsUpsertOne) DoNothing() *SettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SettingsCreate.OnConflict
// documentation for more info.
func (u *SettingsUpsertOne) Update(set func(*SettingsUpsert)) *SettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SettingsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SettingsUpsertOne) SetUpdatedAt(v time.Time) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateUpdatedAt() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetGlobalBanner sets the "global_banner" field.
func (u *SettingsUpsertOne) SetGlobalBanner(v string) *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.SetGlobalBanner(v)
	})
}

// UpdateGlobalBanner sets the "global_banner" field to the value that was provided on create.
func (u *SettingsUpsertOne) UpdateGlobalBanner() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateGlobalBanner()
	})
}

// ClearGlobalBanner clears the value of the "global_banner" field.
func (u *SettingsUpsertOne) ClearGlobalBanner() *SettingsUpsertOne {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearGlobalBanner()
	})
}

// Exec executes the query.
func (u *SettingsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SettingsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SettingsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SettingsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SettingsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SettingsCreateBulk is the builder for creating many Settings entities in bulk.
type SettingsCreateBulk struct {
	config
	err      error
	builders []*SettingsCreate
	conflict []sql.ConflictOption
}

// Save creates the Settings entities in the database.
func (_c *SettingsCreateBulk) Save(ctx context.Context) ([]*Settings, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Settings, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SettingsCreateBulk) SaveX(ctx context.Context) []*Settings {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SettingsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Settings.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SettingsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *SettingsCreateBulk) OnConflict(opts ...sql.ConflictOption) *SettingsUpsertBulk {
	_c.conflict = opts
	return &SettingsUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Settings.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SettingsCreateBulk) OnConflictColumns(columns ...string) *SettingsUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SettingsUpsertBulk{
		create: _c,
	}
}

// SettingsUpsertBulk is the builder for "upsert"-ing
// a bulk of Settings nodes.
type SettingsUpsertBulk struct {
	create *SettingsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Settings.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SettingsUpsertBulk) UpdateNewValues() *SettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(settings.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Settings.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SettingsUpsertBulk) Ignore() *SettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SettingsUpsertBulk) DoNothing() *SettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SettingsCreateBulk.OnConflict
// documentation for more info.
func (u *SettingsUpsertBulk) Update(set func(*SettingsUpsert)) *SettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SettingsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SettingsUpsertBulk) SetUpdatedAt(v time.Time) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateUpdatedAt() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetGlobalBanner sets the "global_banner" field.
func (u *SettingsUpsertBulk) SetGlobalBanner(v string) *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.SetGlobalBanner(v)
	})
}

// UpdateGlobalBanner sets the "global_banner" field to the value that was provided on create.
func (u *SettingsUpsertBulk) UpdateGlobalBanner() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.UpdateGlobalBanner()
	})
}

// ClearGlobalBanner clears the value of the "global_banner" field.
func (u *SettingsUpsertBulk) ClearGlobalBanner() *SettingsUpsertBulk {
	return u.Update(func(s *SettingsUpsert) {
		s.ClearGlobalBanner()
	})
}

// Exec executes the query.
func (u *SettingsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SettingsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SettingsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SettingsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
