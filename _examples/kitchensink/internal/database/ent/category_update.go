// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/category"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/pet"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/predicate"
)

// CategoryUpdate is the builder for updating Category entities.
type CategoryUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryMutation
}

// Where appends a list predicates to the CategoryUpdate builder.
func (_u *CategoryUpdate) Where(ps ...predicate.Category) *CategoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CategoryUpdate) SetUpdatedAt(v time.Time) *CategoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *CategoryUpdate) SetName(v string) *CategoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableName(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetReadonly sets the "readonly" field.
func (_u *CategoryUpdate) SetReadonly(v string) *CategoryUpdate {
	_u.mutation.SetReadonly(v)
	return _u
}

// SetNillableReadonly sets the "readonly" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableReadonly(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetReadonly(*v)
	}
	return _u
}

// SetSkipInSpec sets the "skip_in_spec" field.
func (_u *CategoryUpdate) SetSkipInSpec(v string) *CategoryUpdate {
	_u.mutation.SetSkipInSpec(v)
	return _u
}

// SetNillableSkipInSpec sets the "skip_in_spec" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableSkipInSpec(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetSkipInSpec(*v)
	}
	return _u
}

// ClearSkipInSpec clears the value of the "skip_in_spec" field.
func (_u *CategoryUpdate) ClearSkipInSpec() *CategoryUpdate {
	_u.mutation.ClearSkipInSpec()
	return _u
}

// SetNillable sets the "nillable" field.
func (_u *CategoryUpdate) SetNillable(v string) *CategoryUpdate {
	_u.mutation.SetNillable(v)
	return _u
}

// SetNillableNillable sets the "nillable" field if the given value is not nil.
func (_u *CategoryUpdate) SetNillableNillable(v *string) *CategoryUpdate {
	if v != nil {
		_u.SetNillable(*v)
	}
	return _u
}

// SetStrings sets the "strings" field.
func (_u *CategoryUpdate) SetStrings(v []string) *CategoryUpdate {
	_u.mutation.SetStrings(v)
	return _u
}

// AppendStrings appends value to the "strings" field.
func (_u *CategoryUpdate) AppendStrings(v []string) *CategoryUpdate {
	_u.mutation.AppendStrings(v)
	return _u
}

// ClearStrings clears the value of the "strings" field.
func (_u *CategoryUpdate) ClearStrings() *CategoryUpdate {
	_u.mutation.ClearStrings()
	return _u
}

// SetInts sets the "ints" field.
func (_u *CategoryUpdate) SetInts(v []int) *CategoryUpdate {
	_u.mutation.SetInts(v)
	return _u
}

// AppendInts appends value to the "ints" field.
func (_u *CategoryUpdate) AppendInts(v []int) *CategoryUpdate {
	_u.mutation.AppendInts(v)
	return _u
}

// ClearInts clears the value of the "ints" field.
func (_u *CategoryUpdate) ClearInts() *CategoryUpdate {
	_u.mutation.ClearInts()
	return _u
}

// AddPetIDs adds the "pets" edge to the Pet entity by IDs.
func (_u *CategoryUpdate) AddPetIDs(ids ...int) *CategoryUpdate {
	_u.mutation.AddPetIDs(ids...)
	return _u
}

// AddPets adds the "pets" edges to the Pet entity.
func (_u *CategoryUpdate) AddPets(v ...*Pet) *CategoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPetIDs(ids...)
}

// Mutation returns the CategoryMutation object of the builder.
func (_u *CategoryUpdate) Mutation() *CategoryMutation {
	return _u.mutation
}

// ClearPets clears all "pets" edges to the Pet entity.
func (_u *CategoryUpdate) ClearPets() *CategoryUpdate {
	_u.mutation.ClearPets()
	return _u
}

// RemovePetIDs removes the "pets" edge to Pet entities by IDs.
func (_u *CategoryUpdate) RemovePetIDs(ids ...int) *CategoryUpdate {
	_u.mutation.RemovePetIDs(ids...)
	return _u
}

// RemovePets removes "pets" edges to Pet entities.
func (_u *CategoryUpdate) RemovePets(v ...*Pet) *CategoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CategoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CategoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CategoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CategoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := category.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *CategoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(category.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Readonly(); ok {
		_spec.SetField(category.FieldReadonly, field.TypeString, value)
	}
	if value, ok := _u.mutation.SkipInSpec(); ok {
		_spec.SetField(category.FieldSkipInSpec, field.TypeString, value)
	}
	if _u.mutation.SkipInSpecCleared() {
		_spec.ClearField(category.FieldSkipInSpec, field.TypeString)
	}
	if value, ok := _u.mutation.Nillable(); ok {
		_spec.SetField(category.FieldNillable, field.TypeString, value)
	}
	if value, ok := _u.mutation.Strings(); ok {
		_spec.SetField(category.FieldStrings, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedStrings(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, category.FieldStrings, value)
		})
	}
	if _u.mutation.StringsCleared() {
		_spec.ClearField(category.FieldStrings, field.TypeJSON)
	}
	if value, ok := _u.mutation.Ints(); ok {
		_spec.SetField(category.FieldInts, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedInts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, category.FieldInts, value)
		})
	}
	if _u.mutation.IntsCleared() {
		_spec.ClearField(category.FieldInts, field.TypeJSON)
	}
	if _u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.PetsTable,
			Columns: category.PetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPetsIDs(); len(nodes) > 0 && !_u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.PetsTable,
			Columns: category.PetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.PetsTable,
			Columns: category.PetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CategoryUpdateOne is the builder for updating a single Category entity.
type CategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CategoryUpdateOne) SetUpdatedAt(v time.Time) *CategoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *CategoryUpdateOne) SetName(v string) *CategoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableName(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetReadonly sets the "readonly" field.
func (_u *CategoryUpdateOne) SetReadonly(v string) *CategoryUpdateOne {
	_u.mutation.SetReadonly(v)
	return _u
}

// SetNillableReadonly sets the "readonly" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableReadonly(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetReadonly(*v)
	}
	return _u
}

// SetSkipInSpec sets the "skip_in_spec" field.
func (_u *CategoryUpdateOne) SetSkipInSpec(v string) *CategoryUpdateOne {
	_u.mutation.SetSkipInSpec(v)
	return _u
}

// SetNillableSkipInSpec sets the "skip_in_spec" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableSkipInSpec(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetSkipInSpec(*v)
	}
	return _u
}

// ClearSkipInSpec clears the value of the "skip_in_spec" field.
func (_u *CategoryUpdateOne) ClearSkipInSpec() *CategoryUpdateOne {
	_u.mutation.ClearSkipInSpec()
	return _u
}

// SetNillable sets the "nillable" field.
func (_u *CategoryUpdateOne) SetNillable(v string) *CategoryUpdateOne {
	_u.mutation.SetNillable(v)
	return _u
}

// SetNillableNillable sets the "nillable" field if the given value is not nil.
func (_u *CategoryUpdateOne) SetNillableNillable(v *string) *CategoryUpdateOne {
	if v != nil {
		_u.SetNillable(*v)
	}
	return _u
}

// SetStrings sets the "strings" field.
func (_u *CategoryUpdateOne) SetStrings(v []string) *CategoryUpdateOne {
	_u.mutation.SetStrings(v)
	return _u
}

// AppendStrings appends value to the "strings" field.
func (_u *CategoryUpdateOne) AppendStrings(v []string) *CategoryUpdateOne {
	_u.mutation.AppendStrings(v)
	return _u
}

// ClearStrings clears the value of the "strings" field.
func (_u *CategoryUpdateOne) ClearStrings() *CategoryUpdateOne {
	_u.mutation.ClearStrings()
	return _u
}

// SetInts sets the "ints" field.
func (_u *CategoryUpdateOne) SetInts(v []int) *CategoryUpdateOne {
	_u.mutation.SetInts(v)
	return _u
}

// AppendInts appends value to the "ints" field.
func (_u *CategoryUpdateOne) AppendInts(v []int) *CategoryUpdateOne {
	_u.mutation.AppendInts(v)
	return _u
}

// ClearInts clears the value of the "ints" field.
func (_u *CategoryUpdateOne) ClearInts() *CategoryUpdateOne {
	_u.mutation.ClearInts()
	return _u
}

// AddPetIDs adds the "pets" edge to the Pet entity by IDs.
func (_u *CategoryUpdateOne) AddPetIDs(ids ...int) *CategoryUpdateOne {
	_u.mutation.AddPetIDs(ids...)
	return _u
}

// AddPets adds the "pets" edges to the Pet entity.
func (_u *CategoryUpdateOne) AddPets(v ...*Pet) *CategoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPetIDs(ids...)
}

// Mutation returns the CategoryMutation object of the builder.
func (_u *CategoryUpdateOne) Mutation() *CategoryMutation {
	return _u.mutation
}

// ClearPets clears all "pets" edges to the Pet entity.
func (_u *CategoryUpdateOne) ClearPets() *CategoryUpdateOne {
	_u.mutation.ClearPets()
	return _u
}

// RemovePetIDs removes the "pets" edge to Pet entities by IDs.
func (_u *CategoryUpdateOne) RemovePetIDs(ids ...int) *CategoryUpdateOne {
	_u.mutation.RemovePetIDs(ids...)
	return _u
}

// RemovePets removes "pets" edges to Pet entities.
func (_u *CategoryUpdateOne) RemovePets(v ...*Pet) *CategoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePetIDs(ids...)
}

// Where appends a list predicates to the CategoryUpdate builder.
func (_u *CategoryUpdateOne) Where(ps ...predicate.Category) *CategoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CategoryUpdateOne) Select(field string, fields ...string) *CategoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Category entity.
func (_u *CategoryUpdateOne) Save(ctx context.Context) (*Category, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CategoryUpdateOne) SaveX(ctx context.Context) *Category {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CategoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CategoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := category.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *CategoryUpdateOne) sqlSave(ctx context.Context) (_node *Category, err error) {
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Category.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, category.FieldID)
		for _, f := range fields {
			if !category.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != category.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(category.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Readonly(); ok {
		_spec.SetField(category.FieldReadonly, field.TypeString, value)
	}
	if value, ok := _u.mutation.SkipInSpec(); ok {
		_spec.SetField(category.FieldSkipInSpec, field.TypeString, value)
	}
	if _u.mutation.SkipInSpecCleared() {
		_spec.ClearField(category.FieldSkipInSpec, field.TypeString)
	}
	if value, ok := _u.mutation.Nillable(); ok {
		_spec.SetField(category.FieldNillable, field.TypeString, value)
	}
	if value, ok := _u.mutation.Strings(); ok {
		_spec.SetField(category.FieldStrings, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedStrings(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, category.FieldStrings, value)
		})
	}
	if _u.mutation.StringsCleared() {
		_spec.ClearField(category.FieldStrings, field.TypeJSON)
	}
	if value, ok := _u.mutation.Ints(); ok {
		_spec.SetField(category.FieldInts, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedInts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, category.FieldInts, value)
		})
	}
	if _u.mutation.IntsCleared() {
		_spec.ClearField(category.FieldInts, field.TypeJSON)
	}
	if _u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.PetsTable,
			Columns: category.PetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPetsIDs(); len(nodes) > 0 && !_u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.PetsTable,
			Columns: category.PetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.PetsTable,
			Columns: category.PetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Category{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
