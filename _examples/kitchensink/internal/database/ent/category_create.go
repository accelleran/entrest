// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/category"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/pet"
)

// CategoryCreate is the builder for creating a Category entity.
type CategoryCreate struct {
	config
	mutation *CategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *CategoryCreate) SetCreatedAt(v time.Time) *CategoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableCreatedAt(v *time.Time) *CategoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *CategoryCreate) SetUpdatedAt(v time.Time) *CategoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableUpdatedAt(v *time.Time) *CategoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *CategoryCreate) SetName(v string) *CategoryCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetReadonly sets the "readonly" field.
func (_c *CategoryCreate) SetReadonly(v string) *CategoryCreate {
	_c.mutation.SetReadonly(v)
	return _c
}

// SetSkipInSpec sets the "skip_in_spec" field.
func (_c *CategoryCreate) SetSkipInSpec(v string) *CategoryCreate {
	_c.mutation.SetSkipInSpec(v)
	return _c
}

// SetNillableSkipInSpec sets the "skip_in_spec" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableSkipInSpec(v *string) *CategoryCreate {
	if v != nil {
		_c.SetSkipInSpec(*v)
	}
	return _c
}

// SetNillable sets the "nillable" field.
func (_c *CategoryCreate) SetNillable(v string) *CategoryCreate {
	_c.mutation.SetNillable(v)
	return _c
}

// SetNillableNillable sets the "nillable" field if the given value is not nil.
func (_c *CategoryCreate) SetNillableNillable(v *string) *CategoryCreate {
	if v != nil {
		_c.SetNillable(*v)
	}
	return _c
}

// SetStrings sets the "strings" field.
func (_c *CategoryCreate) SetStrings(v []string) *CategoryCreate {
	_c.mutation.SetStrings(v)
	return _c
}

// SetInts sets the "ints" field.
func (_c *CategoryCreate) SetInts(v []int) *CategoryCreate {
	_c.mutation.SetInts(v)
	return _c
}

// AddPetIDs adds the "pets" edge to the Pet entity by IDs.
func (_c *CategoryCreate) AddPetIDs(ids ...int) *CategoryCreate {
	_c.mutation.AddPetIDs(ids...)
	return _c
}

// AddPets adds the "pets" edges to the Pet entity.
func (_c *CategoryCreate) AddPets(v ...*Pet) *CategoryCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPetIDs(ids...)
}

// Mutation returns the CategoryMutation object of the builder.
func (_c *CategoryCreate) Mutation() *CategoryMutation {
	return _c.mutation
}

// Save creates the Category in the database.
func (_c *CategoryCreate) Save(ctx context.Context) (*Category, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CategoryCreate) SaveX(ctx context.Context) *Category {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CategoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CategoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CategoryCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := category.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := category.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Nillable(); !ok {
		v := category.DefaultNillable
		_c.mutation.SetNillable(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CategoryCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Category.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Category.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Category.name"`)}
	}
	if _, ok := _c.mutation.Readonly(); !ok {
		return &ValidationError{Name: "readonly", err: errors.New(`ent: missing required field "Category.readonly"`)}
	}
	if _, ok := _c.mutation.Nillable(); !ok {
		return &ValidationError{Name: "nillable", err: errors.New(`ent: missing required field "Category.nillable"`)}
	}
	return nil
}

func (_c *CategoryCreate) sqlSave(ctx context.Context) (*Category, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CategoryCreate) createSpec() (*Category, *sqlgraph.CreateSpec) {
	var (
		_node = &Category{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(category.Table, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(category.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(category.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Readonly(); ok {
		_spec.SetField(category.FieldReadonly, field.TypeString, value)
		_node.Readonly = value
	}
	if value, ok := _c.mutation.SkipInSpec(); ok {
		_spec.SetField(category.FieldSkipInSpec, field.TypeString, value)
		_node.SkipInSpec = value
	}
	if value, ok := _c.mutation.Nillable(); ok {
		_spec.SetField(category.FieldNillable, field.TypeString, value)
		_node.Nillable = &value
	}
	if value, ok := _c.mutation.Strings(); ok {
		_spec.SetField(category.FieldStrings, field.TypeJSON, value)
		_node.Strings = value
	}
	if value, ok := _c.mutation.Ints(); ok {
		_spec.SetField(category.FieldInts, field.TypeJSON, value)
		_node.Ints = value
	}
	if nodes := _c.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.PetsTable,
			Columns: category.PetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Category.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CategoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *CategoryCreate) OnConflict(opts ...sql.ConflictOption) *CategoryUpsertOne {
	_c.conflict = opts
	return &CategoryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Category.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *CategoryCreate) OnConflictColumns(columns ...string) *CategoryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &CategoryUpsertOne{
		create: _c,
	}
}

type (
	// CategoryUpsertOne is the builder for "upsert"-ing
	//  one Category node.
	CategoryUpsertOne struct {
		create *CategoryCreate
	}

	// CategoryUpsert is the "OnConflict" setter.
	CategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CategoryUpsert) SetUpdatedAt(v time.Time) *CategoryUpsert {
	u.Set(category.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateUpdatedAt() *CategoryUpsert {
	u.SetExcluded(category.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *CategoryUpsert) SetName(v string) *CategoryUpsert {
	u.Set(category.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateName() *CategoryUpsert {
	u.SetExcluded(category.FieldName)
	return u
}

// SetReadonly sets the "readonly" field.
func (u *CategoryUpsert) SetReadonly(v string) *CategoryUpsert {
	u.Set(category.FieldReadonly, v)
	return u
}

// UpdateReadonly sets the "readonly" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateReadonly() *CategoryUpsert {
	u.SetExcluded(category.FieldReadonly)
	return u
}

// SetSkipInSpec sets the "skip_in_spec" field.
func (u *CategoryUpsert) SetSkipInSpec(v string) *CategoryUpsert {
	u.Set(category.FieldSkipInSpec, v)
	return u
}

// UpdateSkipInSpec sets the "skip_in_spec" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateSkipInSpec() *CategoryUpsert {
	u.SetExcluded(category.FieldSkipInSpec)
	return u
}

// ClearSkipInSpec clears the value of the "skip_in_spec" field.
func (u *CategoryUpsert) ClearSkipInSpec() *CategoryUpsert {
	u.SetNull(category.FieldSkipInSpec)
	return u
}

// SetNillable sets the "nillable" field.
func (u *CategoryUpsert) SetNillable(v string) *CategoryUpsert {
	u.Set(category.FieldNillable, v)
	return u
}

// UpdateNillable sets the "nillable" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateNillable() *CategoryUpsert {
	u.SetExcluded(category.FieldNillable)
	return u
}

// SetStrings sets the "strings" field.
func (u *CategoryUpsert) SetStrings(v []string) *CategoryUpsert {
	u.Set(category.FieldStrings, v)
	return u
}

// UpdateStrings sets the "strings" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateStrings() *CategoryUpsert {
	u.SetExcluded(category.FieldStrings)
	return u
}

// ClearStrings clears the value of the "strings" field.
func (u *CategoryUpsert) ClearStrings() *CategoryUpsert {
	u.SetNull(category.FieldStrings)
	return u
}

// SetInts sets the "ints" field.
func (u *CategoryUpsert) SetInts(v []int) *CategoryUpsert {
	u.Set(category.FieldInts, v)
	return u
}

// UpdateInts sets the "ints" field to the value that was provided on create.
func (u *CategoryUpsert) UpdateInts() *CategoryUpsert {
	u.SetExcluded(category.FieldInts)
	return u
}

// ClearInts clears the value of the "ints" field.
func (u *CategoryUpsert) ClearInts() *CategoryUpsert {
	u.SetNull(category.FieldInts)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Category.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CategoryUpsertOne) UpdateNewValues() *CategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(category.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Category.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CategoryUpsertOne) Ignore() *CategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CategoryUpsertOne) DoNothing() *CategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CategoryCreate.OnConflict
// documentation for more info.
func (u *CategoryUpsertOne) Update(set func(*CategoryUpsert)) *CategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CategoryUpsertOne) SetUpdatedAt(v time.Time) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateUpdatedAt() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *CategoryUpsertOne) SetName(v string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateName() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateName()
	})
}

// SetReadonly sets the "readonly" field.
func (u *CategoryUpsertOne) SetReadonly(v string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetReadonly(v)
	})
}

// UpdateReadonly sets the "readonly" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateReadonly() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateReadonly()
	})
}

// SetSkipInSpec sets the "skip_in_spec" field.
func (u *CategoryUpsertOne) SetSkipInSpec(v string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetSkipInSpec(v)
	})
}

// UpdateSkipInSpec sets the "skip_in_spec" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateSkipInSpec() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateSkipInSpec()
	})
}

// ClearSkipInSpec clears the value of the "skip_in_spec" field.
func (u *CategoryUpsertOne) ClearSkipInSpec() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearSkipInSpec()
	})
}

// SetNillable sets the "nillable" field.
func (u *CategoryUpsertOne) SetNillable(v string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetNillable(v)
	})
}

// UpdateNillable sets the "nillable" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateNillable() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateNillable()
	})
}

// SetStrings sets the "strings" field.
func (u *CategoryUpsertOne) SetStrings(v []string) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetStrings(v)
	})
}

// UpdateStrings sets the "strings" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateStrings() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateStrings()
	})
}

// ClearStrings clears the value of the "strings" field.
func (u *CategoryUpsertOne) ClearStrings() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearStrings()
	})
}

// SetInts sets the "ints" field.
func (u *CategoryUpsertOne) SetInts(v []int) *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.SetInts(v)
	})
}

// UpdateInts sets the "ints" field to the value that was provided on create.
func (u *CategoryUpsertOne) UpdateInts() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateInts()
	})
}

// ClearInts clears the value of the "ints" field.
func (u *CategoryUpsertOne) ClearInts() *CategoryUpsertOne {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearInts()
	})
}

// Exec executes the query.
func (u *CategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CategoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CategoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CategoryCreateBulk is the builder for creating many Category entities in bulk.
type CategoryCreateBulk struct {
	config
	err      error
	builders []*CategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the Category entities in the database.
func (_c *CategoryCreateBulk) Save(ctx context.Context) ([]*Category, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Category, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CategoryCreateBulk) SaveX(ctx context.Context) []*Category {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CategoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Category.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CategoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *CategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *CategoryUpsertBulk {
	_c.conflict = opts
	return &CategoryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Category.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *CategoryCreateBulk) OnConflictColumns(columns ...string) *CategoryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &CategoryUpsertBulk{
		create: _c,
	}
}

// CategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of Category nodes.
type CategoryUpsertBulk struct {
	create *CategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Category.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CategoryUpsertBulk) UpdateNewValues() *CategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(category.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Category.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CategoryUpsertBulk) Ignore() *CategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CategoryUpsertBulk) DoNothing() *CategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CategoryCreateBulk.OnConflict
// documentation for more info.
func (u *CategoryUpsertBulk) Update(set func(*CategoryUpsert)) *CategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CategoryUpsertBulk) SetUpdatedAt(v time.Time) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateUpdatedAt() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *CategoryUpsertBulk) SetName(v string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateName() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateName()
	})
}

// SetReadonly sets the "readonly" field.
func (u *CategoryUpsertBulk) SetReadonly(v string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetReadonly(v)
	})
}

// UpdateReadonly sets the "readonly" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateReadonly() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateReadonly()
	})
}

// SetSkipInSpec sets the "skip_in_spec" field.
func (u *CategoryUpsertBulk) SetSkipInSpec(v string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetSkipInSpec(v)
	})
}

// UpdateSkipInSpec sets the "skip_in_spec" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateSkipInSpec() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateSkipInSpec()
	})
}

// ClearSkipInSpec clears the value of the "skip_in_spec" field.
func (u *CategoryUpsertBulk) ClearSkipInSpec() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearSkipInSpec()
	})
}

// SetNillable sets the "nillable" field.
func (u *CategoryUpsertBulk) SetNillable(v string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetNillable(v)
	})
}

// UpdateNillable sets the "nillable" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateNillable() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateNillable()
	})
}

// SetStrings sets the "strings" field.
func (u *CategoryUpsertBulk) SetStrings(v []string) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetStrings(v)
	})
}

// UpdateStrings sets the "strings" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateStrings() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateStrings()
	})
}

// ClearStrings clears the value of the "strings" field.
func (u *CategoryUpsertBulk) ClearStrings() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearStrings()
	})
}

// SetInts sets the "ints" field.
func (u *CategoryUpsertBulk) SetInts(v []int) *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.SetInts(v)
	})
}

// UpdateInts sets the "ints" field to the value that was provided on create.
func (u *CategoryUpsertBulk) UpdateInts() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.UpdateInts()
	})
}

// ClearInts clears the value of the "ints" field.
func (u *CategoryUpsertBulk) ClearInts() *CategoryUpsertBulk {
	return u.Update(func(s *CategoryUpsert) {
		s.ClearInts()
	})
}

// Exec executes the query.
func (u *CategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
