// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/go-github/v66/github"
	"github.com/google/uuid"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/friendship"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/pet"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/post"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/predicate"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/user"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/schema"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *UserUpdate) SetType(v user.Type) *UserUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *UserUpdate) SetNillableType(v *user.Type) *UserUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *UserUpdate) SetDescription(v string) *UserUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDescription(v *string) *UserUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *UserUpdate) ClearDescription() *UserUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *UserUpdate) SetEnabled(v bool) *UserUpdate {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEnabled(v *bool) *UserUpdate {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdate) ClearEmail() *UserUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *UserUpdate) SetAvatar(v []byte) *UserUpdate {
	_u.mutation.SetAvatar(v)
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *UserUpdate) ClearAvatar() *UserUpdate {
	_u.mutation.ClearAvatar()
	return _u
}

// SetPasswordHashed sets the "password_hashed" field.
func (_u *UserUpdate) SetPasswordHashed(v string) *UserUpdate {
	_u.mutation.SetPasswordHashed(v)
	return _u
}

// SetNillablePasswordHashed sets the "password_hashed" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePasswordHashed(v *string) *UserUpdate {
	if v != nil {
		_u.SetPasswordHashed(*v)
	}
	return _u
}

// SetGithubData sets the "github_data" field.
func (_u *UserUpdate) SetGithubData(v *github.User) *UserUpdate {
	_u.mutation.SetGithubData(v)
	return _u
}

// ClearGithubData clears the value of the "github_data" field.
func (_u *UserUpdate) ClearGithubData() *UserUpdate {
	_u.mutation.ClearGithubData()
	return _u
}

// SetAnyData sets the "any_data" field.
func (_u *UserUpdate) SetAnyData(v *github.User) *UserUpdate {
	_u.mutation.SetAnyData(v)
	return _u
}

// ClearAnyData clears the value of the "any_data" field.
func (_u *UserUpdate) ClearAnyData() *UserUpdate {
	_u.mutation.ClearAnyData()
	return _u
}

// SetProfileURL sets the "profile_url" field.
func (_u *UserUpdate) SetProfileURL(v *schema.ExampleValuer) *UserUpdate {
	_u.mutation.SetProfileURL(v)
	return _u
}

// ClearProfileURL clears the value of the "profile_url" field.
func (_u *UserUpdate) ClearProfileURL() *UserUpdate {
	_u.mutation.ClearProfileURL()
	return _u
}

// SetLastAuthenticatedAt sets the "last_authenticated_at" field.
func (_u *UserUpdate) SetLastAuthenticatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetLastAuthenticatedAt(v)
	return _u
}

// SetNillableLastAuthenticatedAt sets the "last_authenticated_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastAuthenticatedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLastAuthenticatedAt(*v)
	}
	return _u
}

// ClearLastAuthenticatedAt clears the value of the "last_authenticated_at" field.
func (_u *UserUpdate) ClearLastAuthenticatedAt() *UserUpdate {
	_u.mutation.ClearLastAuthenticatedAt()
	return _u
}

// AddPetIDs adds the "pets" edge to the Pet entity by IDs.
func (_u *UserUpdate) AddPetIDs(ids ...int) *UserUpdate {
	_u.mutation.AddPetIDs(ids...)
	return _u
}

// AddPets adds the "pets" edges to the Pet entity.
func (_u *UserUpdate) AddPets(v ...*Pet) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPetIDs(ids...)
}

// AddFollowedPetIDs adds the "followed_pets" edge to the Pet entity by IDs.
func (_u *UserUpdate) AddFollowedPetIDs(ids ...int) *UserUpdate {
	_u.mutation.AddFollowedPetIDs(ids...)
	return _u
}

// AddFollowedPets adds the "followed_pets" edges to the Pet entity.
func (_u *UserUpdate) AddFollowedPets(v ...*Pet) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFollowedPetIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (_u *UserUpdate) AddFriendIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddFriendIDs(ids...)
	return _u
}

// AddFriends adds the "friends" edges to the User entity.
func (_u *UserUpdate) AddFriends(v ...*User) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFriendIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *UserUpdate) AddPostIDs(ids ...int) *UserUpdate {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *UserUpdate) AddPosts(v ...*Post) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// AddFriendshipIDs adds the "friendships" edge to the Friendship entity by IDs.
func (_u *UserUpdate) AddFriendshipIDs(ids ...int) *UserUpdate {
	_u.mutation.AddFriendshipIDs(ids...)
	return _u
}

// AddFriendships adds the "friendships" edges to the Friendship entity.
func (_u *UserUpdate) AddFriendships(v ...*Friendship) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFriendshipIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearPets clears all "pets" edges to the Pet entity.
func (_u *UserUpdate) ClearPets() *UserUpdate {
	_u.mutation.ClearPets()
	return _u
}

// RemovePetIDs removes the "pets" edge to Pet entities by IDs.
func (_u *UserUpdate) RemovePetIDs(ids ...int) *UserUpdate {
	_u.mutation.RemovePetIDs(ids...)
	return _u
}

// RemovePets removes "pets" edges to Pet entities.
func (_u *UserUpdate) RemovePets(v ...*Pet) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePetIDs(ids...)
}

// ClearFollowedPets clears all "followed_pets" edges to the Pet entity.
func (_u *UserUpdate) ClearFollowedPets() *UserUpdate {
	_u.mutation.ClearFollowedPets()
	return _u
}

// RemoveFollowedPetIDs removes the "followed_pets" edge to Pet entities by IDs.
func (_u *UserUpdate) RemoveFollowedPetIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveFollowedPetIDs(ids...)
	return _u
}

// RemoveFollowedPets removes "followed_pets" edges to Pet entities.
func (_u *UserUpdate) RemoveFollowedPets(v ...*Pet) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFollowedPetIDs(ids...)
}

// ClearFriends clears all "friends" edges to the User entity.
func (_u *UserUpdate) ClearFriends() *UserUpdate {
	_u.mutation.ClearFriends()
	return _u
}

// RemoveFriendIDs removes the "friends" edge to User entities by IDs.
func (_u *UserUpdate) RemoveFriendIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveFriendIDs(ids...)
	return _u
}

// RemoveFriends removes "friends" edges to User entities.
func (_u *UserUpdate) RemoveFriends(v ...*User) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFriendIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *UserUpdate) ClearPosts() *UserUpdate {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *UserUpdate) RemovePostIDs(ids ...int) *UserUpdate {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *UserUpdate) RemovePosts(v ...*Post) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// ClearFriendships clears all "friendships" edges to the Friendship entity.
func (_u *UserUpdate) ClearFriendships() *UserUpdate {
	_u.mutation.ClearFriendships()
	return _u
}

// RemoveFriendshipIDs removes the "friendships" edge to Friendship entities by IDs.
func (_u *UserUpdate) RemoveFriendshipIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveFriendshipIDs(ids...)
	return _u
}

// RemoveFriendships removes "friendships" edges to Friendship entities.
func (_u *UserUpdate) RemoveFriendships(v ...*Friendship) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFriendshipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := user.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := user.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "User.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Avatar(); ok {
		if err := user.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "User.avatar": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PasswordHashed(); ok {
		if err := user.PasswordHashedValidator(v); err != nil {
			return &ValidationError{Name: "password_hashed", err: fmt.Errorf(`ent: validator failed for field "User.password_hashed": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(user.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeBytes, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeBytes)
	}
	if value, ok := _u.mutation.PasswordHashed(); ok {
		_spec.SetField(user.FieldPasswordHashed, field.TypeString, value)
	}
	if value, ok := _u.mutation.GithubData(); ok {
		_spec.SetField(user.FieldGithubData, field.TypeJSON, value)
	}
	if _u.mutation.GithubDataCleared() {
		_spec.ClearField(user.FieldGithubData, field.TypeJSON)
	}
	if value, ok := _u.mutation.AnyData(); ok {
		_spec.SetField(user.FieldAnyData, field.TypeJSON, value)
	}
	if _u.mutation.AnyDataCleared() {
		_spec.ClearField(user.FieldAnyData, field.TypeJSON)
	}
	if value, ok := _u.mutation.ProfileURL(); ok {
		_spec.SetField(user.FieldProfileURL, field.TypeOther, value)
	}
	if _u.mutation.ProfileURLCleared() {
		_spec.ClearField(user.FieldProfileURL, field.TypeOther)
	}
	if value, ok := _u.mutation.LastAuthenticatedAt(); ok {
		_spec.SetField(user.FieldLastAuthenticatedAt, field.TypeTime, value)
	}
	if _u.mutation.LastAuthenticatedAtCleared() {
		_spec.ClearField(user.FieldLastAuthenticatedAt, field.TypeTime)
	}
	if _u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPetsIDs(); len(nodes) > 0 && !_u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FollowedPetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowedPetsTable,
			Columns: user.FollowedPetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		createE := &FollowsCreate{config: _u.config, mutation: newFollowsMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFollowedPetsIDs(); len(nodes) > 0 && !_u.mutation.FollowedPetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowedPetsTable,
			Columns: user.FollowedPetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FollowsCreate{config: _u.config, mutation: newFollowsMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FollowedPetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowedPetsTable,
			Columns: user.FollowedPetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FollowsCreate{config: _u.config, mutation: newFollowsMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &FriendshipCreate{config: _u.config, mutation: newFriendshipMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !_u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FriendshipCreate{config: _u.config, mutation: newFriendshipMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FriendshipCreate{config: _u.config, mutation: newFriendshipMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FriendshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFriendshipsIDs(); len(nodes) > 0 && !_u.mutation.FriendshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FriendshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *UserUpdateOne) SetType(v user.Type) *UserUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableType(v *user.Type) *UserUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *UserUpdateOne) SetDescription(v string) *UserUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDescription(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *UserUpdateOne) ClearDescription() *UserUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *UserUpdateOne) SetEnabled(v bool) *UserUpdateOne {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEnabled(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdateOne) ClearEmail() *UserUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *UserUpdateOne) SetAvatar(v []byte) *UserUpdateOne {
	_u.mutation.SetAvatar(v)
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	_u.mutation.ClearAvatar()
	return _u
}

// SetPasswordHashed sets the "password_hashed" field.
func (_u *UserUpdateOne) SetPasswordHashed(v string) *UserUpdateOne {
	_u.mutation.SetPasswordHashed(v)
	return _u
}

// SetNillablePasswordHashed sets the "password_hashed" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePasswordHashed(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPasswordHashed(*v)
	}
	return _u
}

// SetGithubData sets the "github_data" field.
func (_u *UserUpdateOne) SetGithubData(v *github.User) *UserUpdateOne {
	_u.mutation.SetGithubData(v)
	return _u
}

// ClearGithubData clears the value of the "github_data" field.
func (_u *UserUpdateOne) ClearGithubData() *UserUpdateOne {
	_u.mutation.ClearGithubData()
	return _u
}

// SetAnyData sets the "any_data" field.
func (_u *UserUpdateOne) SetAnyData(v *github.User) *UserUpdateOne {
	_u.mutation.SetAnyData(v)
	return _u
}

// ClearAnyData clears the value of the "any_data" field.
func (_u *UserUpdateOne) ClearAnyData() *UserUpdateOne {
	_u.mutation.ClearAnyData()
	return _u
}

// SetProfileURL sets the "profile_url" field.
func (_u *UserUpdateOne) SetProfileURL(v *schema.ExampleValuer) *UserUpdateOne {
	_u.mutation.SetProfileURL(v)
	return _u
}

// ClearProfileURL clears the value of the "profile_url" field.
func (_u *UserUpdateOne) ClearProfileURL() *UserUpdateOne {
	_u.mutation.ClearProfileURL()
	return _u
}

// SetLastAuthenticatedAt sets the "last_authenticated_at" field.
func (_u *UserUpdateOne) SetLastAuthenticatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetLastAuthenticatedAt(v)
	return _u
}

// SetNillableLastAuthenticatedAt sets the "last_authenticated_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastAuthenticatedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLastAuthenticatedAt(*v)
	}
	return _u
}

// ClearLastAuthenticatedAt clears the value of the "last_authenticated_at" field.
func (_u *UserUpdateOne) ClearLastAuthenticatedAt() *UserUpdateOne {
	_u.mutation.ClearLastAuthenticatedAt()
	return _u
}

// AddPetIDs adds the "pets" edge to the Pet entity by IDs.
func (_u *UserUpdateOne) AddPetIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddPetIDs(ids...)
	return _u
}

// AddPets adds the "pets" edges to the Pet entity.
func (_u *UserUpdateOne) AddPets(v ...*Pet) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPetIDs(ids...)
}

// AddFollowedPetIDs adds the "followed_pets" edge to the Pet entity by IDs.
func (_u *UserUpdateOne) AddFollowedPetIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddFollowedPetIDs(ids...)
	return _u
}

// AddFollowedPets adds the "followed_pets" edges to the Pet entity.
func (_u *UserUpdateOne) AddFollowedPets(v ...*Pet) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFollowedPetIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (_u *UserUpdateOne) AddFriendIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddFriendIDs(ids...)
	return _u
}

// AddFriends adds the "friends" edges to the User entity.
func (_u *UserUpdateOne) AddFriends(v ...*User) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFriendIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *UserUpdateOne) AddPostIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *UserUpdateOne) AddPosts(v ...*Post) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// AddFriendshipIDs adds the "friendships" edge to the Friendship entity by IDs.
func (_u *UserUpdateOne) AddFriendshipIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddFriendshipIDs(ids...)
	return _u
}

// AddFriendships adds the "friendships" edges to the Friendship entity.
func (_u *UserUpdateOne) AddFriendships(v ...*Friendship) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFriendshipIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearPets clears all "pets" edges to the Pet entity.
func (_u *UserUpdateOne) ClearPets() *UserUpdateOne {
	_u.mutation.ClearPets()
	return _u
}

// RemovePetIDs removes the "pets" edge to Pet entities by IDs.
func (_u *UserUpdateOne) RemovePetIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemovePetIDs(ids...)
	return _u
}

// RemovePets removes "pets" edges to Pet entities.
func (_u *UserUpdateOne) RemovePets(v ...*Pet) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePetIDs(ids...)
}

// ClearFollowedPets clears all "followed_pets" edges to the Pet entity.
func (_u *UserUpdateOne) ClearFollowedPets() *UserUpdateOne {
	_u.mutation.ClearFollowedPets()
	return _u
}

// RemoveFollowedPetIDs removes the "followed_pets" edge to Pet entities by IDs.
func (_u *UserUpdateOne) RemoveFollowedPetIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveFollowedPetIDs(ids...)
	return _u
}

// RemoveFollowedPets removes "followed_pets" edges to Pet entities.
func (_u *UserUpdateOne) RemoveFollowedPets(v ...*Pet) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFollowedPetIDs(ids...)
}

// ClearFriends clears all "friends" edges to the User entity.
func (_u *UserUpdateOne) ClearFriends() *UserUpdateOne {
	_u.mutation.ClearFriends()
	return _u
}

// RemoveFriendIDs removes the "friends" edge to User entities by IDs.
func (_u *UserUpdateOne) RemoveFriendIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveFriendIDs(ids...)
	return _u
}

// RemoveFriends removes "friends" edges to User entities.
func (_u *UserUpdateOne) RemoveFriends(v ...*User) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFriendIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *UserUpdateOne) ClearPosts() *UserUpdateOne {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *UserUpdateOne) RemovePostIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *UserUpdateOne) RemovePosts(v ...*Post) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// ClearFriendships clears all "friendships" edges to the Friendship entity.
func (_u *UserUpdateOne) ClearFriendships() *UserUpdateOne {
	_u.mutation.ClearFriendships()
	return _u
}

// RemoveFriendshipIDs removes the "friendships" edge to Friendship entities by IDs.
func (_u *UserUpdateOne) RemoveFriendshipIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveFriendshipIDs(ids...)
	return _u
}

// RemoveFriendships removes "friendships" edges to Friendship entities.
func (_u *UserUpdateOne) RemoveFriendships(v ...*Friendship) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFriendshipIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := user.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := user.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "User.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Avatar(); ok {
		if err := user.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "User.avatar": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PasswordHashed(); ok {
		if err := user.PasswordHashedValidator(v); err != nil {
			return &ValidationError{Name: "password_hashed", err: fmt.Errorf(`ent: validator failed for field "User.password_hashed": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(user.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeBytes, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeBytes)
	}
	if value, ok := _u.mutation.PasswordHashed(); ok {
		_spec.SetField(user.FieldPasswordHashed, field.TypeString, value)
	}
	if value, ok := _u.mutation.GithubData(); ok {
		_spec.SetField(user.FieldGithubData, field.TypeJSON, value)
	}
	if _u.mutation.GithubDataCleared() {
		_spec.ClearField(user.FieldGithubData, field.TypeJSON)
	}
	if value, ok := _u.mutation.AnyData(); ok {
		_spec.SetField(user.FieldAnyData, field.TypeJSON, value)
	}
	if _u.mutation.AnyDataCleared() {
		_spec.ClearField(user.FieldAnyData, field.TypeJSON)
	}
	if value, ok := _u.mutation.ProfileURL(); ok {
		_spec.SetField(user.FieldProfileURL, field.TypeOther, value)
	}
	if _u.mutation.ProfileURLCleared() {
		_spec.ClearField(user.FieldProfileURL, field.TypeOther)
	}
	if value, ok := _u.mutation.LastAuthenticatedAt(); ok {
		_spec.SetField(user.FieldLastAuthenticatedAt, field.TypeTime, value)
	}
	if _u.mutation.LastAuthenticatedAtCleared() {
		_spec.ClearField(user.FieldLastAuthenticatedAt, field.TypeTime)
	}
	if _u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPetsIDs(); len(nodes) > 0 && !_u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FollowedPetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowedPetsTable,
			Columns: user.FollowedPetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		createE := &FollowsCreate{config: _u.config, mutation: newFollowsMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFollowedPetsIDs(); len(nodes) > 0 && !_u.mutation.FollowedPetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowedPetsTable,
			Columns: user.FollowedPetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FollowsCreate{config: _u.config, mutation: newFollowsMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FollowedPetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowedPetsTable,
			Columns: user.FollowedPetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FollowsCreate{config: _u.config, mutation: newFollowsMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &FriendshipCreate{config: _u.config, mutation: newFriendshipMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !_u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FriendshipCreate{config: _u.config, mutation: newFriendshipMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FriendshipCreate{config: _u.config, mutation: newFriendshipMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FriendshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFriendshipsIDs(); len(nodes) > 0 && !_u.mutation.FriendshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FriendshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
