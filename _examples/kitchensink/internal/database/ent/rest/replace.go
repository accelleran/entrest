// Code generated by ent, DO NOT EDIT.

package rest

import (
	"context"

	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/pet"
)

// ReplacePetParams defines parameters for replacing a Pet via a PUT request.
// Only includes fields/edges not excluded from replace operations.
// Replace performs full resource replacement: unprovided optional fields are cleared (set to nil).
type ReplacePetParams struct {
	Name      string   `json:"name"`
	Nicknames []string `json:"nicknames,omitempty"`
	// Optional description of the pet.
	Description *string  `json:"description,omitempty"`
	Age         int      `json:"age"`
	Type        pet.Type `json:"type"`
}

func (r *ReplacePetParams) ApplyInputs(builder *ent.PetCreate) *ent.PetCreate {
	builder.SetName(r.Name)
	if r.Nicknames != nil {
		builder.SetNicknames(r.Nicknames)
	}
	if r.Description != nil {
		builder.SetDescription(*r.Description)
	}
	builder.SetAge(r.Age)
	builder.SetType(r.Type)
	return builder
}

// Exec wraps all logic (mapping all provided values to the builder), replaces the entity
// (creating it if it doesn't exist or fully replacing it if it does), and does another query
// (using provided query as base) to get the entity, with all eager loaded edges.
func (r *ReplacePetParams) Exec(ctx context.Context, id int, builder *ent.PetCreate, query *ent.PetQuery) (*ent.Pet, error) {
	// Set the ID for the replace operation
	builder.SetID(id)

	// Apply all inputs from the params
	builder = r.ApplyInputs(builder)

	// Perform replace with OnConflict - full replacement mode (true PUT semantics)
	// Unprovided optional/nullable fields are explicitly cleared
	err := builder.OnConflictColumns(pet.FieldID).Update(func(u *ent.PetUpsert) {
		u.SetName(r.Name)
		if r.Nicknames != nil {
			u.SetNicknames(r.Nicknames)
		} else {
			u.ClearNicknames()
		}
		if r.Description != nil {
			u.SetDescription(*r.Description)
		} else {
			u.ClearDescription()
		}
		u.SetAge(r.Age)
		u.SetType(r.Type)
	}).Exec(ctx)
	if err != nil {
		return nil, err
	}

	// Fetch the entity with eager-loaded edges
	return EagerLoadPet(query.Where(pet.ID(id))).Only(ctx)
}
